{"version":3,"sources":["arrow.png","components/Header.js","constant.js","components/TodoItem.js","components/FooterTodo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","handleChange","event","setState","title","target","value","handleSubmit","preventDefault","state","length","keyCode","item","id","uuidv4","isComplete","onItemSubmit","toggleCompleteAll","renderArrow","arrowShow","src","arrow","checkAllComplete","this","className","onClick","name","placeholder","onChange","onKeyUp","Component","TodoItem","clickDelete","onDeleteItem","completedItem","onCompleteItem","switchToEditMode","nonEditingMode","handleFinishEditing","onFinishEditItem","newContent","onItemContentChanged","renderItemContent","onDoubleClick","defaultValue","type","checked","FooterTodo","renderClearButton","countCompleted","onClearCompletedClick","onChangeFilter","filter","filterButton","total","label","map","button","key","TodoList","deleteItem","deletedItem","listItem","addItem","editItem","editedItem","completeItem","clearCompleted","changeFilter","currentFilter","activeList","countItem","data","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d00b50d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.1ffcbb42.png\";","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport arrow from '../arrow.png';\r\nimport { ENTER_KEY_CODE } from '../constant';\r\n\r\nclass Header extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: '',\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      title: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { title } = this.state;\r\n\r\n    if (title.length && event.keyCode === ENTER_KEY_CODE){\r\n      const item = {\r\n        id: uuidv4(),\r\n        title,\r\n        isComplete: false\r\n      };\r\n\r\n      this.setState({\r\n        title: ''\r\n      });\r\n\r\n      this.props.onItemSubmit(item);\r\n    }\r\n  };\r\n\r\n  toggleCompleteAll = () => {\r\n    const { toggleCompleteAll } = this.props;\r\n\r\n    if (typeof toggleCompleteAll === 'function') {\r\n      toggleCompleteAll();\r\n    }\r\n  };\r\n\r\n  renderArrow = () => {\r\n    return this.props.arrowShow ? <img src={arrow}/> : null;\r\n  };\r\n\r\n  render() {\r\n    const { checkAllComplete } = this.props;\r\n\r\n    return (\r\n      <li className=\"header\">\r\n        <button\r\n          onClick={this.toggleCompleteAll}\r\n          className={`${checkAllComplete ? 'active' : ''}`}>\r\n          {this.renderArrow()}\r\n        </button>\r\n\r\n        <input\r\n          name=\"title\"\r\n          placeholder=\"What needs to be done?\"\r\n          value={this.state.title}\r\n          onChange={this.handleChange}\r\n          onKeyUp={this.handleSubmit}\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","export const ENTER_KEY_CODE = 13;","import React, { Component } from 'react';\r\nimport { ENTER_KEY_CODE } from '../constant';\r\n\r\nclass TodoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      nonEditingMode: true,\r\n      newContent: props.item.title\r\n    }\r\n  }\r\n\r\n  clickDelete = () => {\r\n    const {onDeleteItem, item} = this.props;\r\n\r\n    if (typeof onDeleteItem === 'function') {\r\n      onDeleteItem(item);\r\n    }\r\n  };\r\n\r\n  completedItem = () => {\r\n    const {onCompleteItem, item} = this.props;\r\n\r\n    if (typeof onCompleteItem === 'function') {\r\n      onCompleteItem(item);\r\n    }\r\n  };\r\n\r\n  switchToEditMode = () => {\r\n    this.setState({\r\n      nonEditingMode: false,\r\n    });\r\n  };\r\n\r\n  handleFinishEditing = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (event.keyCode === ENTER_KEY_CODE) {\r\n      this.props.onFinishEditItem(this.props.item, this.state.newContent);\r\n\r\n      this.setState({\r\n        nonEditingMode: true,\r\n      })\r\n    }\r\n  };\r\n\r\n  onItemContentChanged = (event) => {\r\n    const value = event.target.value;\r\n\r\n    this.setState({\r\n      newContent: value\r\n    });\r\n  };\r\n\r\n  renderItemContent = () => {\r\n    const {item} = this.props;\r\n    const {nonEditingMode, newContent} = this.state;\r\n\r\n    if (nonEditingMode) {\r\n      return <p onDoubleClick={this.switchToEditMode}>{item.title}</p>\r\n    }\r\n\r\n    return (\r\n      <input\r\n        className=\"input-edit\"\r\n        defaultValue={newContent}\r\n        onChange={this.onItemContentChanged}\r\n        onKeyUp={this.handleFinishEditing}\r\n      />)\r\n  };\r\n\r\n  render() {\r\n    const isComplete = this.props.item.isComplete;\r\n\r\n    return (\r\n      <li className={`todo-item ${isComplete ? 'completed' : 'item'}`}>\r\n        <input type=\"checkbox\" checked={isComplete} onChange={this.completedItem}/>\r\n\r\n        {this.renderItemContent()}\r\n\r\n        <button className=\"btn-delete\" onClick={this.clickDelete}> X</button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\n\r\nclass FooterTodo extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      filterButton: 'all'\r\n    }\r\n  }\r\n\r\n  renderClearButton = () => this.props.countCompleted ? <button onClick={() => this.onClearCompletedClick()}> Clear completed</button> : null;\r\n\r\n  onClearCompletedClick = () => {\r\n    const { onClearCompletedClick } = this.props;\r\n\r\n    if (typeof onClearCompletedClick === 'function') {\r\n      onClearCompletedClick();\r\n    }\r\n  };\r\n\r\n  onChangeFilter = (filter) => {\r\n    this.props.onChangeFilter(filter);\r\n\r\n    this.setState({filterButton:filter})\r\n  };\r\n\r\n  render() {\r\n    const { filterButton } = this.state;\r\n\r\n    const buttons = [\r\n      {\r\n        label: 'All',\r\n        filter: 'all'\r\n      },\r\n      {\r\n        label: 'Active',\r\n        filter: 'active'\r\n      },\r\n      {\r\n        label: 'Completed',\r\n        filter: 'completed'\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <li className=\"footer\">\r\n        <div className=\"footer-left\">\r\n          <div>{this.props.total} item left</div>\r\n\r\n          <div>\r\n            {buttons.map(button => (\r\n              <button\r\n                key={button.filter}\r\n                className={`${filterButton === button.filter ? 'active' : ''}`}\r\n                onClick={() => this.onChangeFilter(button.filter)}\r\n              >\r\n                {button.label}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {this.renderClearButton()}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FooterTodo;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport TodoItem from './TodoItem';\r\nimport FooterTodo from './FooterTodo';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      listItem : [],\r\n      currentFilter : 'all',\r\n      checkAllComplete: true,\r\n    };\r\n  }\r\n\r\n  deleteItem = (deletedItem) => {\r\n    const listItem = this.state.listItem.filter(item => item.id !== deletedItem.id);\r\n\r\n    this.setState( {\r\n      listItem\r\n    });\r\n  };\r\n\r\n  addItem = (item) => {\r\n    this.setState( {\r\n      listItem : [...this.state.listItem, item]\r\n    });\r\n  };\r\n\r\n  editItem = (editedItem, title) => {\r\n    let listItem = this.state.listItem.map(item => ({\r\n      ...item,\r\n      title: item.id === editedItem.id ? title : item.title\r\n    }));\r\n\r\n    listItem = listItem.filter(item => item.title);\r\n\r\n    this.setState( {\r\n      listItem\r\n    });\r\n  };\r\n\r\n  completeItem = (completedItem) => {\r\n    const listItem = this.state.listItem.map(item => ({\r\n      ...item,\r\n      isComplete: item.id === completedItem.id ? !item.isComplete : item.isComplete\r\n    }));\r\n\r\n    this.setState( {\r\n      listItem\r\n    });\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    const listItem = this.state.listItem.filter(item => !item.isComplete);\r\n\r\n    this.setState( {\r\n      listItem\r\n    });\r\n  };\r\n\r\n  changeFilter = (filter) => {\r\n    this.setState({\r\n      currentFilter : filter\r\n    });\r\n  };\r\n\r\n  toggleCompleteAll = () => {\r\n    let { checkAllComplete, listItem } = this.state;\r\n\r\n    listItem = listItem.map(item => ({\r\n      ...item,\r\n      isComplete: checkAllComplete\r\n    }));\r\n\r\n    this.setState({\r\n      listItem,\r\n      checkAllComplete : !checkAllComplete\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { listItem, currentFilter, checkAllComplete } = this.state;\r\n\r\n    let activeList = listItem.filter(item => !item.isComplete);\r\n\r\n    let countItem = activeList.length;\r\n    let countCompleted = listItem.length - activeList.length;\r\n    let data = [];\r\n\r\n    const arrowShow = !!listItem.length;\r\n\r\n    if (currentFilter === \"all\") {\r\n      data = listItem;\r\n    } else if (currentFilter === \"active\"){\r\n      data = activeList;\r\n    } else {\r\n      data = listItem.filter(item => item.isComplete);\r\n    }\r\n\r\n    return (\r\n      <ul>\r\n        <Header\r\n          onItemSubmit={this.addItem}\r\n          toggleCompleteAll={this.toggleCompleteAll}\r\n          checkAllComplete={checkAllComplete}\r\n          arrowShow={arrowShow}\r\n        />\r\n\r\n        {data.length > 0 && data.map((item, index) =>\r\n          <TodoItem\r\n            key={item.id}\r\n            item={item}\r\n            onDeleteItem={this.deleteItem}\r\n            onCompleteItem={this.completeItem}\r\n            onFinishEditItem={(item, title) => this.editItem(item, title)}\r\n          />)}\r\n\r\n        {listItem.length > 0 &&\r\n        <FooterTodo\r\n          total={countItem}\r\n          countCompleted={countCompleted}\r\n          onClearCompletedClick={this.clearCompleted}\r\n          onChangeFilter={this.changeFilter}\r\n        />\r\n        }\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\n\r\nclass App extends  Component{\r\n  render() {\r\n    return (\r\n        <div className=\"App\">\r\n          <TodoList />\r\n        </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}