{"version":3,"sources":["components/todos/TodoForm.js","constant.js","components/todos/Header.js","components/todos/TodoItem.js","components/todos/FooterTodo.js","actions/todos/TodoAction.js","constants/ActionTypes.js","components/todos/TodoList.js","App.js","serviceWorker.js","saga/index.js","reducers/todos/todosReducers.js","reducers/rootReducer.js","index.js","arrow.svg"],"names":["reduxForm","form","props","handleSubmit","reset","onSubmit","Field","name","placeholder","component","type","onKeyUp","e","keyCode","preventDefault","Header","addTodo","completeAllTodos","arrowShow","useState","checkAllComplete","setCheckAllComplete","className","onClick","src","arrow","alt","value","undefined","title","trim","item","isComplete","TodoItem","completeTodo","deleteTodo","editTodo","edit","setEdit","newContent","setNewContent","isEditItem","handleFinishEditItem","event","onItemChange","target","checked","onChange","defaultValue","onDoubleClick","FooterTodo","total","countCompleted","currentFilter","setVisibilityFilter","clearCompleted","handleClearCompleted","label","filter","map","button","key","todo","checkAll","getDataAPI","getDataAPISuccess","connect","state","todos","todosReducers","dispatch","actions","bindActionCreators","TodoActions","useEffect","activeList","countItem","length","data","index","id","App","Component","Boolean","window","location","hostname","match","getTodoData","completedTodo","todoSaga","API","call","axios","get","res","put","action","newTodo","post","delete","todoComplete","takeLatest","initialState","rootReducer","combineReducers","listTodoToggleCompleteAll","listTodoCleared","listTodo","formReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.bae40c36.chunk.js","sourcesContent":["import React from \"react\"\nimport { Field, reduxForm } from \"redux-form\"\nimport { ENTER_KEY_CODE } from \"../../constant\"\n\nconst TodoForm = props => {\n  const { handleSubmit, reset } = props\n  const addTodo = e => {\n    if (e.keyCode === ENTER_KEY_CODE) {\n      e.preventDefault()\n      reset()\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field name=\"title\" placeholder=\"What need to be done?\" component=\"input\" type=\"text\" onKeyUp={addTodo} />\n    </form>\n  )\n}\n\nexport default reduxForm({\n  form: \"todo\"\n})(TodoForm)\n","export const ENTER_KEY_CODE = 13;","import React, { useState } from \"react\"\nimport arrow from \"../../arrow.svg\"\nimport TodoForm from \"./TodoForm\"\n\nconst Header = ({ addTodo, completeAllTodos, arrowShow }) => {\n  const [checkAllComplete, setCheckAllComplete] = useState(true)\n\n  const toggleCompleteAllTodos = () => {\n    completeAllTodos(checkAllComplete)\n    setCheckAllComplete(!checkAllComplete)\n  }\n\n  const handleSubmit = value => {\n    if (value.title === undefined || !value.title.trim()) return\n\n    const item = {\n      title: value.title,\n      isComplete: false\n    }\n    addTodo(item)\n  }\n\n  const renderArrow = () => {\n    return arrowShow ? <img src={arrow} alt=\"check all\" /> : null\n  }\n  return (\n    <li className=\"header\">\n      <button onClick={toggleCompleteAllTodos} className={`${checkAllComplete ? \"active\" : \"\"}`}>\n        {renderArrow()}\n      </button>\n      {/*redux-form*/}\n      <TodoForm onSubmit={handleSubmit} />\n    </li>\n  )\n}\nexport default Header\n","import React, {useState} from 'react';\nimport {ENTER_KEY_CODE} from \"../../constant\";\n\nconst TodoItem = ({completeTodo, deleteTodo, editTodo, item}) => {\n    const [edit, setEdit] = useState(false);\n    const [newContent, setNewContent] = useState(item.title);\n\n    const completeItem = () => {\n        if (typeof completeTodo === 'function') {\n            completeTodo(item)\n        }\n    }\n    const handleDelete = () => {\n        if (typeof deleteTodo === 'function') {\n            deleteTodo(item)\n        }\n    }\n    const isEditItem = () => {\n        setEdit(true)\n    }\n\n    const handleFinishEditItem = (event) => {\n        event.preventDefault()\n        if (event.keyCode === ENTER_KEY_CODE) {\n            editTodo(item, newContent)\n\n            setEdit(false)\n        }\n    }\n\n    const onItemChange = (event) => {\n        const value = event.target.value;\n\n        setNewContent(value)\n    }\n\n    const renderContent = () => {\n        if (!edit) {\n            return <p onDoubleClick={isEditItem}>{newContent}</p>\n        }\n\n        return (\n            <input\n                className='input-edit'\n                defaultValue={newContent}\n                onChange={onItemChange}\n                onKeyUp={handleFinishEditItem}\n            />\n        )\n    }\n\n    return (\n        <li className={`todo-item ${item.isComplete ? 'completed' : 'item'}`}>\n            <input type=\"checkbox\" checked={item.isComplete} onChange={completeItem}/>\n\n            {renderContent()}\n\n            <button className=\"btn-delete\" onClick={handleDelete}> X</button>\n        </li>\n    )\n}\n\nexport default TodoItem","import React from 'react';\n\nconst FooterTodo = ({ total, countCompleted, currentFilter, setVisibilityFilter, clearCompleted }) => {\n  const renderClearButton = () => countCompleted ? <button onClick={handleClearCompleted}> Clear completed</button> : null;\n\n  const handleClearCompleted = () => {\n    clearCompleted()\n  };\n\n  const onChangeFilter = (filter) => {\n    setVisibilityFilter(filter)\n  };\n\n    const buttons = [\n      {\n        label: 'All',\n        filter: 'all'\n      },\n      {\n        label: 'Active',\n        filter: 'active'\n      },\n      {\n        label: 'Completed',\n        filter: 'completed'\n      }\n    ];\n\n    return (\n      <li className=\"footer\">\n        <div className=\"footer-left\">\n          <div>{total} item left</div>\n\n          <div>\n            {buttons.map(button => (\n              <button\n                key={button.filter}\n                className={`${currentFilter === button.filter ? 'active' : ''}`}\n                onClick={() => onChangeFilter(button.filter)}\n              >\n                {button.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {renderClearButton()}\n      </li>\n    )\n}\n\nexport default FooterTodo;","import * as types from '../../constants/ActionTypes'\n\nexport const addTodo = todo => ({ type: types.ADD_TODO, todo: todo })\n\nexport const deleteTodo = todo => ({ type: types.DELETE_TODO, todo: todo })\n\nexport const editTodo = (todo, title) => ({ type: types.EDIT_TODO, todo, title })\n\nexport const completeTodo = todo => ({ type: types.COMPLETE_TODO, todo: todo })\n\nexport const completeAllTodos = (checkAll) => ({ type: types.COMPLETE_ALL_TODOS, checkAll: checkAll })\n\nexport const clearCompleted = () => ({ type: types.CLEAR_COMPLETED })\n\nexport const setVisibilityFilter = filter => ({ type: types.SET_VISIBILITY_FILTER, filter})\n\nexport const getDataAPI = () => ({ type: types.GET_DATA_API })\n\nexport const getDataAPISuccess = () => ({ type: types.GET_DATA_API_SUCCESS })","export const ADD_TODO = \"ADD_TODO\"\nexport const DELETE_TODO = \"DELETE_TODO\"\nexport const EDIT_TODO = \"EDIT_TODO\"\nexport const COMPLETE_TODO = \"COMPLETE_TODO\"\nexport const COMPLETE_ALL_TODOS = \"COMPLETE_ALL_TODOS\"\nexport const CLEAR_COMPLETED = \"CLEAR_COMPLETED\"\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\"\n\nexport const GET_DATA_API = \"GET_DATA_API\"\nexport const GET_DATA_API_SUCCESS = \"GET_DATA_API_SUCCESS\"\nexport const GET_DATA_API_FAIL = \"GET_DATA_API_FAIL\"\n","import React, { useEffect } from 'react';\nimport Header from './Header';\nimport TodoItem from './TodoItem';\nimport FooterTodo from './FooterTodo';\nimport {bindActionCreators} from \"redux\";\nimport * as TodoActions from \"../../actions/todos/TodoAction\";\nimport {connect} from \"react-redux\";\n\nfunction TodoList ({todos, currentFilter, actions}) {\n    useEffect(() => {\n        const { getDataAPI } = actions\n        getDataAPI()\n    },[])\n    let activeList = todos.filter(item => !item.isComplete);\n    let countItem = activeList.length;\n    let countCompleted = todos.length - activeList.length;\n\n    const arrowShow = !!todos.length;\n\n    let data = [];\n\n    if (currentFilter === \"all\") {\n      data = todos;\n    } else if (currentFilter === \"active\"){\n      data = activeList;\n    } else {\n      data = todos.filter(item => item.isComplete);\n    }\n\n    return (\n      <ul>\n        <Header\n          arrowShow={arrowShow}\n          addTodo={actions.addTodo}\n          completeAllTodos={actions.completeAllTodos}\n        />\n        {data.length > 0 && data.map((item, index) =>\n          <TodoItem\n            key={item.id}\n            item={item}\n            completeTodo = {actions.completeTodo}\n            deleteTodo = {actions.deleteTodo}\n            editTodo = {actions.editTodo}\n          />)}\n\n        {todos.length > 0 &&\n          <FooterTodo\n            total={countItem}\n            countCompleted={countCompleted}\n            currentFilter = {currentFilter}\n            setVisibilityFilter = {actions.setVisibilityFilter}\n            clearCompleted = {actions.clearCompleted}\n          />\n        }\n      </ul>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        todos: state.todosReducers.todos,\n        currentFilter: state.todosReducers.currentFilter\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    // addTodo: todo => dispatch(addTodo(todo)),\n    actions: bindActionCreators(TodoActions, dispatch),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TodoList)\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport TodoList from \"./components/todos/TodoList\"\nclass App extends Component {\n  render() {\n    return <TodoList />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { put, call, takeLatest } from \"redux-saga/effects\"\nimport * as types from \"../constants/ActionTypes\"\nimport axios from \"axios\"\n\nconst API = \"https://5ed9ab7c4378690016c6b212.mockapi.io/api/todos\"\n\nexport function* getTodoData() {\n  try {\n    const res = yield call(axios.get, `${API}`)\n    yield put({ type: types.GET_DATA_API_SUCCESS, res })\n  } catch (e) {\n    yield put({ type: types.GET_DATA_API_FAIL })\n  }\n}\n\nexport function* addTodo(action) {\n  const newTodo = {\n    title: action.todo.title,\n    isComplete: false\n  }\n  try {\n    yield call(axios.post, `${API}`, newTodo)\n    yield put({ type: types.GET_DATA_API })\n  } catch (e) {\n    yield put({ type: types.GET_DATA_API_FAIL })\n  }\n}\n\nexport function* deleteTodo(action) {\n  const id = action.todo.id\n  try {\n    yield call(axios.delete, `${API}/` + id)\n    yield put({ type: types.GET_DATA_API })\n  } catch (e) {\n    yield put({ type: types.GET_DATA_API_FAIL })\n  }\n}\n\nexport function* completedTodo(action) {\n  const todoComplete = { isComplete: !action.todo.isComplete }\n  const id = action.todo.id\n  try {\n    yield call(axios.put, `${API}/` + id, todoComplete)\n    yield put({ type: types.GET_DATA_API })\n  } catch (e) {\n    yield put({ type: types.GET_DATA_API_FAIL })\n  }\n}\n\nexport function* editTodo(action) {\n  const editTodo = { title: action.title }\n  const id = action.todo.id\n\n  try {\n    yield call(axios.put, `${API}/` + id, editTodo)\n    yield put({ type: types.GET_DATA_API })\n  } catch (e) {\n    yield put({ type: types.GET_DATA_API_FAIL })\n  }\n}\n\nexport default function* todoSaga() {\n  yield takeLatest(types.GET_DATA_API, getTodoData)\n  yield takeLatest(types.ADD_TODO, addTodo)\n  yield takeLatest(types.DELETE_TODO, deleteTodo)\n  yield takeLatest(types.COMPLETE_TODO, completedTodo)\n  yield takeLatest(types.EDIT_TODO, editTodo)\n}\n","import { COMPLETE_ALL_TODOS, CLEAR_COMPLETED, SET_VISIBILITY_FILTER, GET_DATA_API_SUCCESS } from \"../../constants/ActionTypes\"\n\nconst initialState = {\n  todos: [],\n  currentFilter: \"all\"\n}\n\nexport default function todosReducers(state = initialState, action) {\n  switch (action.type) {\n    case COMPLETE_ALL_TODOS:\n      const listTodoToggleCompleteAll = state.todos.map(item => ({\n        ...item,\n        isComplete: action.checkAll\n      }))\n\n      return {\n        ...state,\n        todos: listTodoToggleCompleteAll\n      }\n    case CLEAR_COMPLETED:\n      const listTodoCleared = state.todos.filter(item => !item.isComplete)\n\n      return {\n        ...state,\n        todos: listTodoCleared\n      }\n    case SET_VISIBILITY_FILTER:\n      return {\n        ...state,\n        currentFilter: action.filter\n      }\n    case GET_DATA_API_SUCCESS: //saga get api\n      const listTodo = action.res.data\n      return {\n        ...state,\n        todos: listTodo\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from \"redux\"\nimport todosReducers from \"./todos/todosReducers\"\nimport { reducer as formReducer } from \"redux-form\"\n\nconst rootReducer = combineReducers({\n  todosReducers,\n  form: formReducer\n})\n\nexport default rootReducer\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport { createStore, applyMiddleware } from \"redux\"\nimport createSagaMiddleware from \"redux-saga\"\nimport todoSaga from \"./saga/index\"\nimport { Provider } from \"react-redux\"\nimport rootReducer from \"./reducers/rootReducer\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\n\nsagaMiddleware.run(todoSaga)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/arrow.08d0b185.svg\";"],"sourceRoot":""}